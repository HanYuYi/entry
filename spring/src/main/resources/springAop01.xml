<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置日志切入，注意：要在xml头部配置约束
        约束 ==> xmlns:aop
        约束的支持 ==> http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
    -->

    <bean id="userService" class="com.HanYuYi.aop02.springAop.example01.service.UserServiceImpl"/>
    <bean id="log" class="com.HanYuYi.aop02.springAop.example01.log.Log"/>
    <bean id="afterLog" class="com.HanYuYi.aop02.springAop.example01.log.AfterLog"/>

    <!--配置aop，第一种，接口实现方式-->
    <aop:config>
        <!--切入点，pointcut：实现接口的切入对象用这个 expression 是一个表达式，配置方式详解：https://blog.csdn.net/qq_37306041/article/details/84779925 -->
        <aop:pointcut id="pointcutUserServiceImpl" expression="execution(* com.HanYuYi.aop02.springAop.example01.service.UserServiceImpl.*(..))"/>

        <!--将事务增强与切入点组合， 将log 和 afterLog 增强到 pointcutUserServiceImpl-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcutUserServiceImpl"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcutUserServiceImpl"/>
    </aop:config>


    <bean id="diyCache" class="com.HanYuYi.aop02.springAop.example01.cache.DiyCache"/>

    <!--配置aop，第二种，自定义切面-->
    <aop:config>
        <aop:aspect ref="diyCache">
            <aop:pointcut id="pointcutUserSelect" expression="execution(* com.HanYuYi.aop02.springAop.example01.service.UserServiceImpl.select(..))"/>
            <!--同时的时间（生命周期）-->
            <aop:before method="cacheSelectData" pointcut-ref="pointcutUserSelect"/>
        </aop:aspect>
    </aop:config>


    <!--使用注解注册bean-->
    <context:component-scan
            base-package="com.HanYuYi.aop02.springAop.example01.annotation" />
    <context:annotation-config />
    <!--配置aop，第三种，开启注解支持
    proxy-target-class 设置动态代理代理的是接口还是类，默认为false是接口，JDK的 invocationHandler，为true的时候是类 cglib
    -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
</beans>